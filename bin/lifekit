#!/usr/bin/env node

const program = require('commander');
const exec = require('child_process').exec;
const readline = require('readline');
const os = require('os');
const fs = require('fs');
const stat = fs.stat;
const appInfo = require('./../package.json');
const path = require('path');

var _exit = process.exit;

process.exit = exit

// CLI

before(program, 'outputHelp', function() {
  this.allowUnknownOption();
});

program
  .version(appInfo.version)
  .usage('[options] [dir]');

//生成项目
program
  .command('create')
  .action(function() {
    let remote_path = path.resolve(__dirname, '../../lifekit-generator');

    // Path
    var destinationPath = '.';
    if (typeof program.args[0] === 'string') {
      destinationPath = program.args[0];
    }
    // App name
    var appName = path.basename(path.resolve(destinationPath))

    // Generate application
    emptyDirectory(destinationPath, function(empty) {
      if (empty || program.force) {
        createApplication(appName, destinationPath, remote_path);
      } else {
        confirm('destination is not empty, continue? [y/n] ', function(ok) {
          if (ok) {
            process.stdin.destroy();
            createApplication(appName, destinationPath, remote_path);
          } else {
            console.error('aborting');
            exit(1);
          }
        });
      }
    });
  });


//发布模块
program
//子命令
  .command('publish')
  //注册一个callback函数
  .action(function() { 
    console.log("发布模块待开发！");
	});
	
//安装模块
program
//子命令
  .command('install')
  //注册一个callback函数
  .action(function() {  
    if (typeof program.args[0] !== 'string') {
      return;
    } 
    //组件名称
    let component = program.args[0]; 

    exec('npm install '+component,function(error, stdout, stderr){
      if (error) {
        console.error(`exec error: ${error}`);
        return;
      }
      fs.rename("./node_modules/"+component,"./engine/"+component,function(err){
        if(err){
          console.log(err);
          return;
        }
        console.log(component+"安装成功！");
      });
    });
  });

program.parse(process.argv)

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function() {
    fn.call(this);
    old.apply(this, arguments);
  };
}


function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files) {
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

/**
 * Graceful exit for async STDIO
 */

function exit(code) {
  function done() {
    if (!(draining--)) _exit(code);
  }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream) {
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function(input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path, remote_path) { 

	var prompt = launchedFromCmd() ? '>' : '$';


	let flag = fs.existsSync(path);
  // 不存在
  if (!flag) {
    fs.mkdirSync(path);
  } 

	// 复制bin目录
	copyFile( remote_path+"/bin", path+"/bin" );
	// 复制engine目录
  copyFile( remote_path+"/engine", path+"/engine" );
  // 复制lifekit目录
  copyFile( remote_path+"/lifekit", path+"/lifekit" );
	// 复制app.js
	copyFile( remote_path+"/app.js", path+"/app.js"  );
 
	// package.json
	var pkg = {
		name: app_name,
		version: '0.1.0',
		private: true,
		"scripts": {
			"start": "node app.js",  
			"test": "echo \"Error: no test specified\" && exit 1"
		},
		"dependencies": {
			"debug": "^2.6.3",
      "ejs": "^2.5.6",
      "koa": "^2.2.0",
      "koa-bodyparser": "^3.2.0",
      "koa-convert": "^1.2.0",
      "koa-cors": "0.0.16",
      "koa-generic-session": "^1.11.5",
      "koa-json": "^2.0.2",
      "koa-jwt": "^3.2.1",
      "koa-logger": "^2.0.1",
      "koa-onerror": "^1.2.1",
      "koa-router": "^7.0.1",
      "koa-send": "^4.1.0",
      "koa-static": "^3.0.0",
      "koa-views": "^5.2.1",
      "object-keys": "^1.0.11",
      "node-uuid": "^1.4.8",
      "socket.io": "^1.7.3",
      "socketio-jwt": "^4.5.0"
		}
	}
		
	fs.writeFileSync(path+"/package.json", JSON.stringify(pkg, null, 2));
	fs.writeFileSync(path+"/README.md", "");
	
	console.log();
	console.log('   install dependencies:');
	console.log('     %s cd %s && npm install', prompt, path);
	console.log();
	console.log('   run the app:');
	console.log('     %s npm start', prompt); 

	console.log();
}

/*
 * 复制目录中的所有文件包括子目录
 * @param{ String } 需要复制的目录或文件
 * @param{ String } 复制到指定的目录或文件
 */
var copyFile = function(src, dst){
	stat(src, function(err, st) {
		if (err) {
			throw err;
		}
		// 判断是否为文件
		if (st.isFile()) {
			// 创建读取流
			readable = fs.createReadStream(src);
			// 创建写入流
			writable = fs.createWriteStream(dst);
			// 通过管道来传输流
			readable.pipe(writable);
		}
		// 如果是目录则递归调用自身
		else if (st.isDirectory()) {
			exists(src, dst, copy);
		}
	});
}

/*
 * 复制目录中的所有文件包括子目录
 * @param{ String } 需要复制的目录
 * @param{ String } 复制到指定的目录
 */
var copy = function(src, dst) {
  // 读取目录中的所有文件/目录
  fs.readdir(src, function(err, paths) {
    if (err) {
      throw err;
    }
    paths.forEach(function(path) {
      var _src = src + '/' + path,
        _dst = dst + '/' + path,
        readable, writable;
      stat(_src, function(err, st) {
        if (err) {
          throw err;
        }
        // 判断是否为文件
        if (st.isFile()) {
          // 创建读取流
          readable = fs.createReadStream(_src);
          // 创建写入流
          writable = fs.createWriteStream(_dst);
          // 通过管道来传输流
          readable.pipe(writable);
        }
        // 如果是目录则递归调用自身
        else if (st.isDirectory()) {
          exists(_src, _dst, copy);
        }
      });
    });
  });
};
// 在复制目录前需要判断该目录是否存在，不存在需要先创建目录
var exists = function(src, dst, callback) {
  let flag = fs.existsSync(dst);
  // 已存在
  if (flag) {
    callback(src, dst);
  }
  // 不存在
  else {
    fs.mkdir(dst, function() {
      callback(src, dst);
    });
  }
};

/**
 * Determine if launched from cmd.exe
 */

function launchedFromCmd() {
  return process.platform === 'win32'
    && process.env._ === undefined;
}
